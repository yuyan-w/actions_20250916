# .github/workflows/pipeline.yml
name: Pipeline (Tag or Manual)

on:
  push:
    tags:
      - "v*" # リリースタグのみ
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to use (e.g., v1.2.3-20250916-abcdefg)"
        required: false

permissions:
  contents: read

env:
  RELEASE_BRANCH: production

jobs:
  show-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine TAG and TARGET_SHA
        id: det
        shell: bash
        run: |
          set -euo pipefail
          EVENT="${{ github.event_name }}"

          if [ "$EVENT" = "workflow_dispatch" ]; then
            if [ -n "${{ inputs.tag }}" ]; then
              TAG="${{ inputs.tag }}"
            else
              echo "::error title=No tag provided::Manual run requires 'inputs.tag'."
              exit 1
            fi
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            TAG="${GITHUB_REF#refs/tags/}"
          else
            echo "::error title=No tag found::This workflow requires a tag push or a manual input."
            exit 1
          fi

          # タグ形式チェック
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}-[0-9a-f]{7}$ ]]; then
            echo "::error title=Invalid tag format::Expected vMAJOR.MINOR.PATCH-YYYYMMDD-abcdefg7, got: $TAG"
            exit 1
          fi

          TARGET_SHA="$(git rev-list -n1 "$TAG")"

          echo "TAG=$TAG" >> "$GITHUB_ENV"
          echo "TARGET_SHA=$TARGET_SHA" >> "$GITHUB_ENV"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "target_sha=$TARGET_SHA" >> "$GITHUB_OUTPUT"

      - name: Ensure tag commit is on ${{ env.RELEASE_BRANCH }}
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "${RELEASE_BRANCH}:${RELEASE_BRANCH}"
          if git merge-base --is-ancestor "$TARGET_SHA" "$RELEASE_BRANCH"; then
            echo "OK: $TAG points to commit on branch '${RELEASE_BRANCH}'."
          else
            echo "::error title=Tag not on branch::Tag '$TAG' (commit $TARGET_SHA) is not reachable from '${RELEASE_BRANCH}'."
            exit 1
          fi

      - name: Print (behaviour check)
        run: |
          echo "Pipeline would run for tag: $TAG (commit: $TARGET_SHA) on branch: ${RELEASE_BRANCH}"
