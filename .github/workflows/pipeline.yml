# .github/workflows/pipeline.yml
name: Pipeline (tag or manual)

on:
  push:
    tags: ["v*"] # 人手のタグpushにも対応（任意・保険）
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag (e.g., v1.2.3-20250916-abcdefg)"
        required: false

permissions:
  contents: read

env:
  RELEASE_BRANCH: production

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Resolve TAG
        id: res
        shell: bash
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
            [ -n "${TAG:-}" ] || { echo "::error title=No tag provided::Provide inputs.tag"; exit 1; }
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}-[0-9a-f]{7}$ ]] || {
            echo "::error title=Invalid tag::Expected vX.Y.Z-YYYYMMDD-abcdefg7, got: $TAG"; exit 1; }
          TARGET_SHA="$(git rev-list -n1 "$TAG")"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "TARGET_SHA=$TARGET_SHA" >> $GITHUB_ENV

      - name: Ensure tag commit is on ${{ env.RELEASE_BRANCH }}
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "${RELEASE_BRANCH}:${RELEASE_BRANCH}"
          git merge-base --is-ancestor "$TARGET_SHA" "$RELEASE_BRANCH" || {
            echo "::error title=Tag not on branch::'$TAG' not reachable from '${RELEASE_BRANCH}'"; exit 1; }

      - name: Extract version (vX.Y.Z) for app
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          if [[ "$TAG" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)-[0-9]{8}-[0-9a-f]{7}$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "version=$VERSION"
          else
            echo "::error title=Cannot parse version from tag::TAG=$TAG"; exit 1;
          fi

      - name: Print (behaviour check)
        shell: bash
        run: |
          echo "Pipeline: TAG=$TAG, VERSION=$VERSION, SHA=$TARGET_SHA, BRANCH=${RELEASE_BRANCH}"
          # ここで VERSION をアプリに渡す（例）
          # echo "::set-output name=app_version::$VERSION"  # 推奨は $GITHUB_OUTPUT だが用途に応じて
