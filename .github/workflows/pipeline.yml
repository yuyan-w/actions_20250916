name: Pipeline (via workflow_run / tag / manual)

on:
  # A) 連鎖トリガー（GITHUB_TOKENの制限を回避）
  workflow_run:
    workflows: ["Tag on Merge (and Manual)"]
    types: [completed]
  # B) 人手のタグpushでも動く
  push:
    tags: ["v*"]
  # C) 手動（inputsは任意、無ければ失敗）
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to use (e.g., v1.2.3-20250916-abcdefg)"
        required: false

permissions:
  contents: read
  actions: read # 他ワークフローのartifactをrun-id指定で取得するため必須

env:
  RELEASE_BRANCH: production

jobs:
  show-tag:
    if: >
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
      || github.event_name == 'push'
      || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # workflow_run 経路：直前WFの artifact からタグ名を取得
      - name: Download tag artifact from previous workflow run
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: created-tag
          path: .
          run-id: ${{ github.event.workflow_run.id }}

      - name: Determine TAG and TARGET_SHA
        id: det
        shell: bash
        run: |
          set -euo pipefail
          case "${{ github.event_name }}" in
            workflow_run)
              if [ -f release-tag.txt ]; then TAG="$(cat release-tag.txt)"; fi
              ;;
            push)
              if [[ "${GITHUB_REF}" == refs/tags/* ]]; then TAG="${GITHUB_REF#refs/tags/}"; fi
              ;;
            workflow_dispatch)
              if [ -n "${{ inputs.tag }}" ]; then TAG="${{ inputs.tag }}"; fi
              ;;
          esac

          if [ -z "${TAG:-}" ]; then
            echo "::error title=No tag found::Need a tag (from previous workflow, tag push, or manual input)."
            exit 1
          fi

          # 形式チェック vMAJOR.MINOR.PATCH-YYYYMMDD-abcdefg(7)
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}-[0-9a-f]{7}$ ]]; then
            echo "::error title=Invalid tag format::Expected vX.Y.Z-YYYYMMDD-abcdefg7, got: $TAG"
            exit 1
          fi

          TARGET_SHA="$(git rev-list -n1 "$TAG")"
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "TARGET_SHA=$TARGET_SHA" >> $GITHUB_ENV

      - name: Ensure tag commit is on ${{ env.RELEASE_BRANCH }}
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "${RELEASE_BRANCH}:${RELEASE_BRANCH}"
          if git merge-base --is-ancestor "$TARGET_SHA" "$RELEASE_BRANCH"; then
            echo "OK: $TAG points to commit on branch '${RELEASE_BRANCH}'."
          else
            echo "::error title=Tag not on branch::'$TAG' (commit $TARGET_SHA) is not reachable from '${RELEASE_BRANCH}'."
            exit 1
          fi

      - name: Print (behaviour check)
        shell: bash
        run: |
          echo "Pipeline would run for tag: $TAG (commit: $TARGET_SHA) on branch: ${RELEASE_BRANCH}"
