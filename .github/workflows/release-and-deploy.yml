# .github/workflows/release-and-deploy.yml
name: Release and Deploy (production)

on:
  pull_request:
    types: [closed]
    branches: [production]
  workflow_dispatch: {} # 手動は入力なし

permissions:
  contents: write # タグ作成のために必要

env:
  RELEASE_BRANCH: production
  TZ: Asia/Tokyo

jobs:
  release: # PRマージ時はタグを作る。手動時は既存タグを自動解決する（作らない）
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.out.outputs.tag }}
      version: ${{ steps.out.outputs.version }}
      target_sha: ${{ steps.out.outputs.target_sha }}
    steps:
      - name: Checkout production (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: production

      - name: Resolve TAG / VERSION / TARGET_SHA
        id: resolve
        shell: bash
        run: |
          set -euo pipefail

          # 便利関数：タグ形式チェック
          valid_tag() {
            [[ "$1" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}-[0-9a-f]{7}$ ]]
          }

          EVENT="${{ github.event_name }}"
          if [ "$EVENT" = "workflow_dispatch" ]; then
            # 手動：既存タグから production に到達する最新リリースタグを自動選択
            git fetch --tags --force
            git fetch origin "${RELEASE_BRANCH}:${RELEASE_BRANCH}"

            # タグを作成日時で新しい順に走査し、production に到達する最初のものを採用
            TAG=""
            while IFS= read -r CANDIDATE; do
              valid_tag "$CANDIDATE" || continue
              SHA="$(git rev-list -n1 "$CANDIDATE")"
              if git merge-base --is-ancestor "$SHA" "${RELEASE_BRANCH}"; then
                TAG="$CANDIDATE"
                TARGET_SHA="$SHA"
                break
              fi
            done < <(git for-each-ref --sort=-creatordate --format='%(refname:short)' 'refs/tags/v*')

            if [ -z "${TAG:-}" ]; then
              echo "::error title=No usable release tag::No tag like vX.Y.Z-YYYYMMDD-abcdefg7 reachable from ${RELEASE_BRANCH}."
              exit 1
            fi

            if [[ "$TAG" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)-[0-9]{8}-[0-9a-f]{7}$ ]]; then
              VERSION="${BASHREMATCH[1]}"
            elif [[ "$TAG" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)- ]]; then
              VERSION="${BASH_REMATCH[1]}"
            else
              echo "::error title=Parse error::Cannot extract vX.Y.Z from $TAG"; exit 1
            fi

            echo "MANUAL picked TAG=$TAG TARGET_SHA=$TARGET_SHA VERSION=$VERSION"

          else
            # PRマージ：PRタイトルから VERSION、イベントの merge_commit_sha からターゲットを確定し、タグを新規作成
            TITLE="${{ github.event.pull_request.title }}"
            if [[ "$TITLE" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)#.+$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
            else
              echo "::error title=Invalid PR title::Expected vMAJOR.MINOR.PATCH#ticket, got: $TITLE"
              exit 1
            fi

            TARGET_SHA="${{ github.event.pull_request.merge_commit_sha }}"
            if [ -z "$TARGET_SHA" ]; then
              TARGET_SHA="$(git rev-parse origin/${RELEASE_BRANCH})"
            fi

            SHORT_SHA="$(echo "$TARGET_SHA" | cut -c1-7)"
            TAG="${VERSION}-$(date +%Y%m%d)-${SHORT_SHA}"

            # 既存チェック
            if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
              echo "::notice title=Tag already exists::$TAG already exists. Reusing it."
            else
              git config user.name  "github-actions[bot]"
              git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

              # 必要なら対象コミットだけフェッチ
              git cat-file -e "${TARGET_SHA}^{commit}" 2>/dev/null || git fetch --no-tags origin "${TARGET_SHA}"
              git tag -a "$TAG" -m "Tag $TAG" "$TARGET_SHA"
              git push origin "$TAG"
            fi

            echo "AUTO created/confirmed TAG=$TAG TARGET_SHA=$TARGET_SHA VERSION=$VERSION"
          fi

          {
            echo "TAG=$TAG"
            echo "VERSION=$VERSION"
            echo "TARGET_SHA=$TARGET_SHA"
          } >> "$GITHUB_ENV"

      - name: Output values
        id: out
        shell: bash
        run: |
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "target_sha=${TARGET_SHA}" >> "$GITHUB_OUTPUT"

  deploy:
    needs: release
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.release.outputs.tag }}
      VERSION: ${{ needs.release.outputs.version }}
      TARGET_SHA: ${{ needs.release.outputs.target_sha }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: production

      - name: Validate tag & reachability
        shell: bash
        run: |
          set -euo pipefail
          [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}-[0-9a-f]{7}$ ]] || {
            echo "::error title=Invalid tag::Expected vX.Y.Z-YYYYMMDD-abcdefg7, got: $TAG"; exit 1; }
          RESOLVED_SHA="$(git rev-list -n1 "$TAG")"
          if [ "$RESOLVED_SHA" != "$TARGET_SHA" ]; then
            echo "::error title=Tag mismatch::Tag $TAG -> $RESOLVED_SHA but expected $TARGET_SHA"
            exit 1
          fi
          git fetch origin "${RELEASE_BRANCH}:${RELEASE_BRANCH}"
          git merge-base --is-ancestor "$TARGET_SHA" "${RELEASE_BRANCH}" || {
            echo "::error title=Tag not on branch::'$TAG' not reachable from '${RELEASE_BRANCH}'"; exit 1; }
          echo "OK: $TAG on ${RELEASE_BRANCH} ($TARGET_SHA)"

      - name: Extract vX.Y.Z for app (from $TAG)
        id: ver
        shell: bash
        run: |
          set -euo pipefail
          if [[ "$TAG" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)-[0-9]{8}-[0-9a-f]{7}$ ]]; then
            VERSION_ONLY="${BASH_REMATCH[1]}"
            echo "VERSION_ONLY=$VERSION_ONLY" >> "$GITHUB_ENV"
            echo "version=$VERSION_ONLY" >> "$GITHUB_OUTPUT"
            echo "App version = $VERSION_ONLY"
          else
            echo "::error title=Parse error::Cannot extract version from TAG=$TAG"
            exit 1
          fi

      - name: Deploy (demo)
        shell: bash
        run: |
          echo "Deploying: TAG=$TAG VERSION=$VERSION_ONLY SHA=$TARGET_SHA"
          # 実デプロイ処理に置き換え
