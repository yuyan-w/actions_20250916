# .github/workflows/deploy.yml
name: Deploy on merge

on:
  push:
    branches:
      - production
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  # 1) PRタイトルから vX.Y.Z を取り出し、完全版タグ vX.Y.Z-YYYYMMDD-abcdefg を作る
  resolve-version:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.compose.outputs.tag_name }}
      core_version: ${{ steps.ver.outputs.core }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get merged PR for this commit
        id: pr
        env:
          SHA: ${{ github.sha }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          PR_JSON="$(gh api /repos/${{ github.repository }}/commits/$SHA/pulls)"
          PR_NUMBER="$(echo "$PR_JSON" | jq -r '.[0].number')"
          if [ -z "${PR_NUMBER}" ] || [ "${PR_NUMBER}" = "null" ]; then
            echo "::error title=PR not found::No PR associated with $SHA"
            exit 1
          fi
          echo "pr=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: "Extract vX.Y.Z from PR title (format: v1.2.3#NNN)"
        id: ver
        env:
          PR: "${{ steps.pr.outputs.pr }}"
          GH_TOKEN: "${{ github.token }}"
        run: |
          set -euo pipefail
          TITLE="$(gh api /repos/${{ github.repository }}/pulls/$PR --jq '.title')"
          if [[ "$TITLE" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+)\#.+$ ]]; then
            CORE="${BASH_REMATCH[1]}"
            echo "core=$CORE" >> "$GITHUB_OUTPUT"
          else
            echo "::error title=Version not found::PR title must be 'vMAJOR.MINOR.PATCH#ticket'. title=$TITLE"
            exit 1
          fi

      - name: Compose full tag (Tokyo time)
        id: compose
        env:
          CORE: ${{ steps.ver.outputs.core }}
        run: |
          set -euo pipefail
          if [ -z "${CORE:-}" ]; then
            echo "::error::Missing core version from previous step"
            exit 1
          fi
          DATE="$(TZ=Asia/Tokyo date +%Y%m%d)"
          SHORT="$(git rev-parse --short=7 ${{ github.sha }})"
          TAG="${CORE}-${DATE}-${SHORT}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]{8}-[0-9a-f]{7}$ ]]; then
            echo "::error::Invalid tag format $TAG"
            exit 1
          fi
          echo "tag_name=$TAG" >> "$GITHUB_OUTPUT"

  # 2) タグ付け専用ジョブ（冪等）：タグを作成/検証し、vX.Y.Z と完全版タグを後続へ渡す
  tag-and-export:
    needs:
      - resolve-version
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.out.outputs.tag_name }}
      core_version: ${{ steps.out.outputs.core_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify/create tag idempotently
        id: tag
        env:
          TAG: ${{ needs.resolve-version.outputs.tag_name }}
          CORE: ${{ needs.resolve-version.outputs.core_version }}
        run: |
          set -euo pipefail
          if [ -z "${TAG:-}" ] || [ -z "${CORE:-}" ]; then
            echo "::error::Missing TAG or CORE from previous job"
            exit 1
          fi

          git fetch --tags

          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            EXISTING_SHA="$(git rev-list -n1 "$TAG")"
            if [ "$EXISTING_SHA" = "$GITHUB_SHA" ]; then
              echo "::notice title=Tag exists::Tag $TAG already points to $GITHUB_SHA. Skipping creation."
            else
              echo "::error title=Tag collision::Tag $TAG exists on $EXISTING_SHA but expected $GITHUB_SHA"
              exit 1
            fi
          else
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag -a "$TAG" -m "Tag $TAG" "$GITHUB_SHA"
            git push origin "$TAG"
          fi

      - name: Export outputs for downstream jobs
        id: out
        env:
          TAG: ${{ needs.resolve-version.outputs.tag_name }}
          CORE: ${{ needs.resolve-version.outputs.core_version }}
        run: |
          set -euo pipefail
          echo "tag_name=$TAG" >> "$GITHUB_OUTPUT"
          echo "core_version=$CORE" >> "$GITHUB_OUTPUT"

  # 3) 実デプロイ側：タグを取得して出力のみ（ここを本番デプロイ処理に差し替えてもよい）
  deploy:
    needs:
      - tag-and-export
    runs-on: ubuntu-latest
    steps:
      - name: Show resolved versions
        env:
          TAG: ${{ needs.tag-and-export.outputs.tag_name }}
          CORE: ${{ needs.tag-and-export.outputs.core_version }}
        run: |
          set -euo pipefail
          echo "Resolved CORE version: $CORE"
          echo "Resolved FULL tag    : $TAG"
          # ↓ 実デプロイするなら、ここで $TAG / $CORE を使って処理を行う
          # echo "Deploying $TAG ..."
